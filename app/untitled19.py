# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcueaAo4PkgtbYUuPeeGndnBoLpRg8Nt
"""

!pip install langchain
!pip install -qU langchain-google-genai
!pip install langchain-community

from langchain.chains import LLMChain
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate

import getpass
import os

if "GOOGLE_API_KEY" not in os.environ:
    os.environ["GOOGLE_API_KEY"] = "PUT UR API KEY HERE FATASS -> go here https://aistudio.google.com/apikey"

# Initialize Gemini API (Replace with actual API setup)
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-pro",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
    # other params...
)



# Define an enhanced prompt template for detecting personal information
moderation_prompt_template = """
You are a chatbot moderator identifying if a message contains personal information or a request for it.
If a message contains information like a name, phone number, address, or specific location, return "STOP".
If it contains a request asking for any personal information, including things like "Where should I deliver the package?" or "Whatâ€™s your address?", return "WARN".
Otherwise, return "ALLOW".

Message: "{message}"

Example Responses:
1. Message: "My address is 123 Maple St." -> STOP
2. Message: "Can I have your phone number?" -> WARN
3. Message: "Where should I deliver the package?" -> WARN
4. Message: "The meeting is at the office." -> ALLOW
"""

# Set up the prompt with few-shot examples
moderation_prompt = PromptTemplate(
    input_variables=["message"],
    template=moderation_prompt_template
)

# Create a moderation chain that uses the prompt with the Gemini model
moderation_chain = LLMChain(
    llm=llm,
    prompt=moderation_prompt
)

def moderate_message(message):
    # Use the moderation chain to analyze the message
    result = moderation_chain.run({"message": message})
    return result.strip()

# Chat function with moderation check and warning
def chat():
    WARNINGS=0
    print("Chatbot started. Type your messages.")
    while True:
        user_message = input("User: ")

        # Moderate the message
        moderation_result = moderate_message(user_message)

        if moderation_result == "STOP":
            print("Warning: Personal information detected. For privacy and safety, this conversation has ended.")
            break
        elif moderation_result == "WARN":
            WARNINGS+=1
            if WARNINGS<3:
              print(f"Warning: Asking for personal information is not allowed. Please continue without such requests. {WARNINGS}/3 ")
            else:
              print(f"Warning: Asking for personal information is not allowed. Please continue without such requests. {WARNINGS}/3 ")
              print("Warning: Personal information detected. For privacy and safety, this conversation has ended.")
              break
        else:
            print("Chatbot: Message received. Please continue.")

# Run the chat
chat()